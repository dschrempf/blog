#+HUGO_BASE_DIR: ../../hugo
#+HUGO_SECTION: Coding
#+HUGO_CATEGORIES: Coding
#+HUGO_TYPE: post
#+TITLE: A simulator for continuous-time Markov chains
#+DATE: <2016-04-09 Sat>
#+AUTHOR: Dominik Schrempf
#+DESCRIPTION: Simulate a continuous time Markov chain with any transition rate matrix.
#+KEYWORDS: CTMC "Markov Chain" "Continuous-Time Markov Chain"
#+LANGUAGE: en

[2016-04-09 Sat] I extended [[file:2015-03-26-PopGen-CPP-Programs.org][my set of C++ programs]] to include a
simulator for generic continuous-time Markov chains.  I.e., any
transition rate matrix can be used.

If you are interested, just get the [[https://github.com/dschrempf/popgen-cpp-programs][GitHub repository]] and compile the
whole set of programs with =make all=.  Documentation can be found in
the =doc/= folder (check the =CTMC= class).

There is a sample program =src/moran_model_boundary_mutation=, that
runs the Moran model with boundary mutation (De Maio, N., Schrempf,
D., & Kosiol, C. (2015). PoMo: An Allele Frequency-Based Approach for
Species Tree Estimation. Systematic Biology, 64(6),
1018â€“1031. doi:10.1093/sysbio/syv048).

Using the chain is as easy as:
#+BEGIN_SRC cpp
  // Define a GNU Scientific Library Matrix object.
  gsl_matrix * my_transition_rate_matrix = alloc_and_set_matrix();
  CTMC my_chain(my_transition_rate_matrix, number_of_states);
  my_chain.run(a_specific_time);

  // Now we print some output.
  my_chain.print_hitting_times(std::cout);
  my_chain.print_invariant_distribution(std::cout);
#+END_SRC

If you want to log the path of the chain, you have to activate the log
path upon initialization:
#+BEGIN_SRC cpp
  CTMC my_chain(my_transition_rate_matrix, number_of_states, true);

  // Print the path.
  my_chain.print_path(std::cout);
#+END_SRC
Logging the path is disabled by default because it uses a lot of
memory.
